package main

import (
	"fmt"
	"testing"
)

/**
最大正方形

在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。
示例 1:
```
输入:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4
```
*/

func TestMaximalSquare(t *testing.T) {

	matrix := [][]byte{
		{1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1},
		{1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0},
	}

	res := MaximalSquare(matrix)
	fmt.Println("Result --> ", res)

	/*
		["0","0","0","1","0","1","1","1"],
		["0","1","1","0","0","1","0","1"],
		["1","0","1","1","1","1","0","1"],
		["0","0","0","1","0","0","0","0"],
		["0","0","1","0","0","0","1","0"],
		["1","1","1","0","0","1","1","1"],
		["1","0","0","1","1","0","0","1"],
		["0","1","0","0","1","1","0","0"],
		["1","0","0","1","0","0","0","0"]]

	*/

}

func TestDpMaximalSquare(t *testing.T) {

	fmt.Println('0')
	v := '0' + 2
	fmt.Println(v)
	fmt.Println(byte(v))

	matrix := [][]byte{
		{'1', '0', '1', '0', '0'},
		{'1', '0', '1', '1', '1'},
		{'1', '1', '1', '1', '1'},
		{'1', '0', '0', '1', '0'},
	}

	res := dpMaximalSquare(matrix)
	fmt.Println("Result --> ", res)

}
