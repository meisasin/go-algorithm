package main

/**
和可被 K 整除的子数组

给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。

示例 1:
```
输入：A = [4,5,0,-2,-3,1], K = 5
输出：7
解释：
有 7 个子数组满足其元素之和可被 K = 5 整除：
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
```

提示：

- 1 <= A.length <= 30000
- -10000 <= A[i] <= 10000
- 2 <= K <= 10000
*/

/**
O(n) 是不可能 O(n), 就会简单的暴力解法, 一言不合就是数学公式题, 我太难了
*/
func SubarraysDivByK(A []int, K int) int {
	num := 0
	for i := 0; i < len(A); i++ {
		count := 0
		for j := i; j < len(A); j++ {
			count += A[j]
			if count%K == 0 {
				num++
			}
		}
	}
	return num
}
