package main

/**
只出现一次的数字

给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:
```
 输入: [2,2,1]
 输出: 1
```

示例 2:
```
输入: [4,1,2,1,2]
输出: 4
```
*/

/**
这题之前做过哎...,没理解线性时间复杂度是什么意思，不使用额外空间是不能定义变量吗？ 那样的话，直接每次循环的时候，都更新数组的值来保存上一次 ^= 后的值也可以 (试了下，内存占用和执行速度都变慢了，不知道为什么)
*/
func singleNumberWithMe(nums []int) int {
	num := 0
	for _, i := range nums {
		num ^= i
	}
	return num
}
